import random

class Nodo:
    def __init__(self, atleta):
        self.atleta = atleta
        self.siguiente = None
        self.anterior = None

class ListaDoblementeEnlazada:
    def __init__(self):
        self.cabeza = None
        self.cola = None

    def agregar_atleta(self, atleta):
        nuevo_nodo = Nodo(atleta)
        if not self.cabeza:
            self.cabeza = nuevo_nodo
            self.cola = nuevo_nodo
        else:
            nuevo_nodo.anterior = self.cola
            self.cola.siguiente = nuevo_nodo
            self.cola = nuevo_nodo

    def buscar_atleta(self, numero):
        actual = self.cabeza
        while actual:
            if actual.atleta.numero == numero:
                return actual.atleta
            actual = actual.siguiente
        return None

    def mostrar_posiciones(self):
        actual = self.cabeza
        while actual:
            detras = actual.siguiente.atleta.numero if actual.siguiente else self.cabeza.atleta.numero
            delante = actual.anterior.atleta.numero if actual.anterior else self.cola.atleta.numero
            print(f"Detrás del atleta {actual.atleta.numero} ({actual.atleta.nombre}) va el {detras}, delante del {actual.atleta.numero} va el {delante}.")
            actual = actual.siguiente

    def pasar_competidor(self, numero, nuevo_numero):
        nodo_a_mover = self.buscar_nodo(numero)
        if not nodo_a_mover:
            print(f"El atleta con el número {numero} no está registrado.")
            return

        nuevo_nodo = self.buscar_nodo(nuevo_numero)
        if nuevo_nodo:
            print(f"La posición {nuevo_numero} ya está ocupada.")
            return

        self.eliminar_nodo(nodo_a_mover)
        self.insertar_nodo(nodo_a_mover, nuevo_numero)
        nodo_a_mover.atleta.numero = nuevo_numero
        print(f"El atleta {nodo_a_mover.atleta.nombre} con el número {numero} ha pasado a la posición {nuevo_numero}.")

    def simular_carrera(self):
        if not self.cabeza or self.cabeza.siguiente is None or self.cabeza.siguiente.siguiente is None:
            print("Se necesitan al menos 3 atletas para simular una carrera.")
            return

        nodos = []
        actual = self.cabeza
        while actual:
            nodos.append(actual)
            actual = actual.siguiente
        random.shuffle(nodos)

        print("Nueva posición:")
        for i, nodo in enumerate(nodos):
            print(f"{i + 1}. {nodo.atleta.nombre}")

        ganador = nodos[0].atleta
        print(f"El ganador de la carrera es el atleta {ganador.nombre} con el número {ganador.numero}.")

    def buscar_nodo(self, numero):
        actual = self.cabeza
        while actual:
            if actual.atleta.numero == numero:
                return actual
            actual = actual.siguiente
        return None

    def eliminar_nodo(self, nodo):
        if not nodo:
            return

        if nodo == self.cabeza:
            self.cabeza = nodo.siguiente
            if self.cabeza:
                self.cabeza.anterior = None
            else:
                self.cola = None
        elif nodo == self.cola:
            self.cola = nodo.anterior
            if self.cola:
                self.cola.siguiente = None
        else:
            nodo.anterior.siguiente = nodo.siguiente
            nodo.siguiente.anterior = nodo.anterior

    def insertar_nodo(self, nodo, numero):
        if self.cabeza is None:
            self.cabeza = nodo
            self.cola = nodo
            return

        actual = self.cabeza
        anterior = None
        while actual and actual.atleta.numero < numero:
            anterior = actual
            actual = actual.siguiente

        if anterior is None:
            nodo.siguiente = self.cabeza
            self.cabeza.anterior = nodo
            self.cabeza = nodo
        else:
            anterior.siguiente = nodo
            nodo.anterior = anterior
            if actual:
                nodo.siguiente = actual
                actual.anterior = nodo
            else:
                self.cola = nodo

class Atleta:
    def __init__(self, nombre, numero):
        self.nombre = nombre
        self.numero = numero

# Programa principal
carrera = ListaDoblementeEnlazada()

bandera = True
while bandera:
    print("\nMenú:")
    print("1. Agregar atleta")
    print("2. Buscar atleta")
    print("3. Mostrar posiciones")
    print("4. Pasar competidor")
    print("5. Simular carrera")
    print("6. Salir")
    opcion = input("Ingrese una opción: ")

    if opcion == "1":
        nombre = input("Ingrese el nombre del atleta: ").lower()
        numero = int(input("Ingrese el número del atleta: "))
        atleta = Atleta(nombre, numero)
        carrera.agregar_atleta(atleta)
    elif opcion == "2":
        numero = int(input("Ingrese el número del atleta: "))
        atleta = carrera.buscar_atleta(numero)
        if atleta:
            print(f"El atleta {atleta.nombre} con el número {atleta.numero} está registrado.")
        else:
            print(f"El atleta con el número {numero} no está registrado.")
    elif opcion == "3":
        carrera.mostrar_posiciones()
    elif opcion == "4":
        numero = int(input("Ingrese el número del atleta que pasará: "))
        nuevo_numero = int(input("Ingrese el número de la posición a la que pasará: "))
        carrera.pasar_competidor(numero, nuevo_numero)
    elif opcion == "5":
        carrera.simular_carrera()
    elif opcion == "6":
        bandera = False
    else:
        print("Opción inválida. Intente nuevamente.")
